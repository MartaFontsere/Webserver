#include "Server.hpp"
#include <iostream> // para imprimir mensajes
#include <cstring>  // para memset, strerror, strlen...
#include <unistd.h> // para close(), read, write
#include <fcntl.h>  // para fcntl() ‚Üí modo no bloqueante
// CUAL DE LAS DOS? #include <netinet/in.h> // sockaddr_in, htons, etc.
#include <arpa/inet.h>  // para sockaddr_in, htons, INADDR_ANY
#include <sys/socket.h> // para socket(), bind(), listen()

// Constructor: guarda el puerto que usaremos
Server::Server(const std::string &port) : _port(port), _serverFd(-1)
{
}

// Destructor: si el socket est√° abierto, lo cerramos
Server::~Server()
{
    if (_serverFd != -1)
        close(_serverFd);
}

/*
Un socket es un descriptor de archivo especial (como un int) que representa una conexi√≥n de red.

En el constructor, solo guardamos el puerto (a√∫n no creamos el socket).
_serverFd se inicializa con -1 para indicar ‚Äúno hay socket abierto todav√≠a‚Äù.

En el destructor, comprobamos si el socket se cre√≥ (_serverFd != -1), y lo cerramos para liberar recursos del sistema.
    Los recursos (como sockets) deben liberarse autom√°ticamente cuando el objeto se destruye.
*/

bool Server::init()
{
    // Creamos y asociamos el socket al puerto
    _serverFd = createAndBind(_port.c_str()); //_port.c_str() significa que le est√°s pasando el puerto como cadena de caracteres erminado en \0, es decir, un const char* al estilo C.
    if (_serverFd == -1)
    {
        std::cerr << "‚ùå Error: no se pudo crear el socket." << std::endl;
        return false;
    }

    // Lo ponemos en modo no bloqueante
    if (setNonBlocking(_serverFd) == -1)
    {
        std::cerr << "‚ùå Error: no se pudo poner el socket en modo no bloqueante." << std::endl;
        return false;
    }

    // Empezamos a escuchar
    if (listen(_serverFd, SOMAXCONN) == -1)
    {
        std::cerr << "‚ùå Error en listen()." << std::endl;
        return false;
    }

    std::cout << "‚úÖ Servidor escuchando en el puerto " << _port << std::endl;
    return true;
}

/*
Esta es la funci√≥n principal de inicializaci√≥n del servidor.

Llama a createAndBind() ‚Üí que crea el socket y lo asocia a una direcci√≥n IP y puerto.

Llama a setNonBlocking() ‚Üí para que las llamadas accept(), recv(), send() no bloqueen.

Luego hace listen() ‚Üí el servidor empieza a ‚Äúescuchar‚Äù nuevas conexiones entrantes. Este paso convierte el socket en servidor pasivo. El listen le dice al Kernel que ese socket ya no va a iniciar conexiones (deja de ser cliente), ahora va a escucharlas y aceptarlas (socket de escucha).
    listen(server_fd, backlog); -> El segundo argumento (backlog) define el n√∫mero m√°ximo de conexiones pendientes que el kernel puede mantener en cola antes de que t√∫ las aceptes.
        SOMAXCONN es una constante del sistema (normalmente 128 o m√°s).

        Si 150 clientes intentan conectarse al mismo tiempo y t√∫ solo has aceptado 100, los 50 restantes esperan en esa cola.

        Si se llena, el resto recibir√°n un error tipo connection refused.

    listen() no acepta conexiones.
    Solo prepara al kernel para recibirlas y meterlas en cola.
    accept() es la que realmente crea un nuevo socket para hablar con cada cliente.

Si cualquiera de estas partes falla, devuelve false.

üß† Concepto importante:
En red, ‚Äúbloquear‚Äù significa que el programa se detiene esperando algo (por ejemplo, un cliente que nunca responde).
Si todo fuera bloqueante, solo podr√≠as atender a un cliente a la vez ‚Äî por eso usamos modo no bloqueante.
*/

int Server::createAndBind(const char *port)
{
    int sockfd = socket(AF_INET, SOCK_STREAM, 0);
    if (sockfd == -1)
    {
        std::cerr << "Error creando socket: " << strerror(errno) << std::endl;
        return -1;
    }

    // Reusar la direcci√≥n inmediatamente si el servidor se reinicia
    int opt = 1;
    setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &opt, sizeof(opt));

    struct sockaddr_in addr;
    std::memset(&addr, 0, sizeof(addr));
    addr.sin_family = AF_INET;              // IPv4
    addr.sin_addr.s_addr = INADDR_ANY;      // Escucha en todas las interfaces
    addr.sin_port = htons(std::atoi(port)); // Puerto ‚Üí formato de red

    if (bind(sockfd, (struct sockaddr *)&addr, sizeof(addr)) == -1)
    {
        std::cerr << "Error en bind(): " << strerror(errno) << std::endl;
        close(sockfd);
        return -1;
    }

    return sockfd;
}

/*
En nuestro servidor, necesitamos un socket que:

    Escuche conexiones en un puerto concreto (por ejemplo, 8080).

    Est√© asociado a una direcci√≥n IP (normalmente 0.0.0.0, o sea ‚Äútodas las interfaces locales‚Äù).

    Pueda aceptar clientes que intenten conectarse a √©l.

    üëâ La funci√≥n createAndBind() se encarga de crear ese socket y vincularlo (bind) al puerto donde escuchar√°.


Por qu√© recibe un const char *port en lugar de std::string
    Esto es simplemente por compatibilidad con funciones de C antiguas.
    socket(), bind(), htons() y atoi() son funciones de la librer√≠a C, no de C++.

    atoi() (convertir cadena a n√∫mero) espera un const char *.

    As√≠ que cuando en el constructor del servidor hacemos _serverFd = createAndBind(_port.c_str());
    ... lo que estamos haciendo es convertir el std::string a const char* para que lo pueda usar atoi().



La funci√≥n crea y configura el socket para escuchar conexiones:

socket(AF_INET, SOCK_STREAM, 0)
‚Üí Crea un socket TCP (orientado a conexi√≥n).
    AF_INET = familia de direcciones IPv4.
    SOCK_STREAM = tipo de socket orientado a conexi√≥n (TCP).
    0: protocolo por defecto (TCP).
Si devuelve -1, algo fall√≥ (no se pudo reservar el socket).

setsockopt(... SO_REUSEADDR ...)
‚Üí Permite reiniciar el servidor sin esperar a que el puerto se libere (evita ‚ÄúAddress already in use‚Äù).
    Esta parte permite reutilizar el puerto inmediatamente si reinicias el servidor.
    Sin esto, si paras y arrancas r√°pido, el SO podr√≠a decir:

    ‚ÄúAddress already in use‚Äù üò©

    Porque el puerto sigue en estado TIME_WAIT unos segundos tras cerrar el socket.

    üí° SO_REUSEADDR le dice al kernel:

    ‚ÄúTranquilo, s√© lo que hago, d√©jame reutilizar el puerto enseguida‚Äù.

    ***Pero porque deberia reiniciarse el servidor?
        Este punto (el de setsockopt(... SO_REUSEADDR ...)) suele parecer m√°gico o innecesario al principio‚Ä¶ pero en realidad tiene que ver con c√≥mo funciona el sistema operativo, no solo con tu c√≥digo.

        üß© 1Ô∏è‚É£ Qu√© pasa cuando tu servidor arranca

        Cuando haces esto:

        int sockfd = socket(...);
        bind(sockfd, ...);
        listen(sockfd, ...);


        El sistema operativo (Linux, macOS, etc.) reserva el puerto que le has indicado.
        Por ejemplo, si pides el puerto 8080, el sistema dice:

        ‚ÄúVale, el proceso X est√° usando el puerto 8080, nadie m√°s puede usarlo mientras siga abierto.‚Äù

        As√≠ evita conflictos (dos programas intentando escuchar en el mismo puerto).

        üß© 2Ô∏è‚É£ Qu√© pasa cuando cierras el servidor

        Cuando terminas tu programa (o lo paras con Ctrl+C), en teor√≠a ese socket deber√≠a cerrarse y liberar el puerto.
        Pero el sistema operativo no lo libera de inmediato ‚ö†Ô∏è

        ¬øPor qu√©?
        Porque en una conexi√≥n TCP, hay un mecanismo de seguridad para asegurarse de que no se pierdan mensajes pendientes.
        Cuando cierras el socket, las conexiones que ten√≠a abiertas entran en un estado llamado TIME_WAIT.

        üîé En ese estado:

        El puerto sigue ‚Äúreservado‚Äù durante unos segundos (a veces 30‚Äì60).

        Aunque tu proceso ya termin√≥, el kernel mantiene esa reserva temporal.

        El resultado es que si intentas reiniciar el servidor inmediatamente (por ejemplo, compilas y lo vuelves a ejecutar enseguida), te salta este error:

        Error: bind() failed
        Address already in use


        üß© 3Ô∏è‚É£ Qu√© significa ‚Äúreiniciar el servidor‚Äù

        No es que tu c√≥digo se ‚Äúreinicie solo‚Äù.
        Reiniciar significa algo como:

        T√∫ paras el programa (Ctrl+C, o matas el proceso).

        Lo vuelves a ejecutar enseguida (por ejemplo, porque has recompilado para probar algo nuevo).

        Ejemplo pr√°ctico:

        $ ./webserv
        # Servidor escuchando en el puerto 8080...

        # Lo detienes:
        ^C   # (Ctrl+C)

        # Lo vuelves a ejecutar:
        $ ./webserv
        Error: bind() failed: Address already in use


        üí• Este error se da porque el sistema operativo a√∫n tiene el puerto 8080 bloqueado en TIME_WAIT.

        üß© 4Ô∏è‚É£ Qu√© hace setsockopt(SO_REUSEADDR)

        Esa llamada es una configuraci√≥n opcional del socket, y su funci√≥n es decirle al sistema:

        ‚ÄúTranquilo, quiero reutilizar el puerto incluso si est√° en TIME_WAIT.‚Äù

        Es decir:
        ‚úÖ Permite volver a hacer bind() sobre el mismo puerto aunque el SO crea que ‚Äúa√∫n est√° en uso‚Äù por una conexi√≥n previa del mismo programa.

        No afecta a la seguridad ni al funcionamiento normal.
        Solo acelera el ciclo de desarrollo y evita que tengas que esperar medio minuto cada vez que haces un cambio en el c√≥digo.


        Si no estoy en TIME_WAIT, ¬øpara qu√© quiero SO_REUSEADDR? ¬øNo hace nada, o incluso puede fastidiar algo?‚Äù

            üëâ No, no molesta, y s√≠ conviene dejarla siempre.
            En la mayor√≠a de casos no cambia nada cuando el puerto est√° libre, y solo act√∫a cuando lo necesitas (cuando est√° ocupado en TIME_WAIT).

            El sistema operativo simplemente ignora la opci√≥n porque no tiene nada que ‚Äúreutilizar‚Äù.
            El bind() funciona igual que siempre, sin efectos secundarios.

            ‚úÖ As√≠ que no pasa absolutamente nada diferente respecto a no haber puesto la l√≠nea.

Se llena la estructura sockaddr_in con:

    sin_family: AF_INET ‚Üí familia IPv4

    sin_addr.s_addr: INADDR_ANY ‚Üí escucha en cualquier IP local, es decir, escuchar√° en 127.0.0.1, 192.168.x.x, etc.

    sin_port: htons() ‚Üí convierte el n√∫mero de puerto al formato de red (big endian).

bind() ‚Üí asocia el socket al puerto del sistema operativo.

üí° Si bind() falla, puede ser porque ya hay otro programa usando ese puerto.


*** Explicaci√≥n m√°s en profundidad:

sockaddr_in es una estructura de C (no de C++) que describe una direcci√≥n de red IPv4.
Est√° definida en el archivo: #include <netinet/in.h>
Su definici√≥n simplificada es m√°s o menos as√≠:
    struct sockaddr_in {
        sa_family_t    sin_family; // Familia de direcciones (AF_INET)
        in_port_t      sin_port;   // Puerto (en formato network byte order)
        struct in_addr sin_addr;   // Direcci√≥n IP (tambi√©n en formato network byte order)
        unsigned char  sin_zero[8]; // Relleno (no se usa, pero mantiene el tama√±o)
    };


üîπ Qu√© representa
    Piensa que un socket es como un enchufe universal, pero para que el sistema operativo sepa a qu√© puerto y a qu√© IP quieres enchufarte, tienes que darle una direcci√≥n completa.

    üß† As√≠ que sockaddr_in ‚âà ‚Äútarjeta con la direcci√≥n postal del servidor‚Äù:
        sin_family = tipo de direcci√≥n (por ejemplo, IPv4 o IPv6).
        sin_port = puerto donde escuchas (ej. 8080).
        sin_addr = IP donde quieres escuchar (ej. 127.0.0.1 o 0.0.0.0).

üîπ Por qu√© la necesitamos
    Las funciones del sistema (como bind(), connect(), sendto(), etc.) son muy antiguas, vienen del mundo C, y todas esperan recibir un puntero gen√©rico a una direcci√≥n:
        struct sockaddr*

    Pero nosotros usamos la versi√≥n m√°s espec√≠fica:
        struct sockaddr_in

    As√≠ que cuando la pasamos a una funci√≥n, tenemos que hacer un cast:
        (struct sockaddr*)&addr
                ***Explicaci√≥n: struct sockaddr_in addr; crea una estructura sockaddr_in, que sirve para guardar la direcci√≥n IP y el puerto cuando trabajas con IPv4.
                Tu variable addr es un sockaddr_in, pero la funci√≥n espera un sockaddr*. Entonces necesitamos hacer un casteo
                Esto significa:
                    &addr ‚Üí direcci√≥n de memoria de la variable addr (un puntero a sockaddr_in)
                    (struct sockaddr*) ‚Üí le decimos al compilador:
                        ‚ÄúTranquilo, trata este puntero como si apuntara a una sockaddr gen√©rica.‚Äù
                No cambia los datos en memoria, solo la forma en que los interpretamos.


    Esto es porque la funci√≥n no sabe si le est√°s pasando una direcci√≥n IPv4 (sockaddr_in), IPv6 (sockaddr_in6), o Unix domain socket (sockaddr_un).
    El cast solo le dice: ‚Äútranquilo, es del tipo gen√©rico sockaddr*, pero realmente contiene una direcci√≥n IPv4‚Äù.


    üß† Ejemplo: el bloque real de c√≥digo
        struct sockaddr_in addr;
        addr.sin_family = AF_INET; // IPv4
        addr.sin_addr.s_addr = INADDR_ANY; // Escucha en todas las interfaces
        addr.sin_port = htons(port); // Puerto (convertido a formato de red)

    üß© Explicaci√≥n l√≠nea a l√≠nea
        1Ô∏è‚É£ addr.sin_family = AF_INET;

        Le decimos que es una direcci√≥n IPv4 (no IPv6).
        Este valor (AF_INET) est√° definido en <sys/socket.h>.

        üí° Si usaras IPv6, pondr√≠as AF_INET6.

        2Ô∏è‚É£ addr.sin_addr.s_addr = INADDR_ANY;

        Esto significa:
            ‚ÄúEscucha en todas las interfaces disponibles.‚Äù

        Si tu m√°quina tiene varias IPs (por ejemplo, una interna y otra externa), con INADDR_ANY el servidor aceptar√° conexiones desde cualquiera.

        üí¨ Alternativas:
            Si quisieras escuchar solo en localhost, pondr√≠as:
                addr.sin_addr.s_addr = inet_addr("127.0.0.1");

        Si quisieras una IP concreta, tambi√©n podr√≠as convertirla con inet_addr("192.168.1.42").

        3Ô∏è‚É£ addr.sin_port = htons(port);

        port aqu√≠ es el n√∫mero de puerto que t√∫ decides (por ejemplo, 8080).

        Pero ‚Äîmuy importante‚Äî el sistema operativo no guarda los n√∫meros igual que tu CPU.
        Las CPUs pueden ser little endian o big endian, y eso afecta al orden de los bytes.

        üí° Ejemplo:
            Puerto 8080 = 0x1F90

        En memoria en un Intel (little endian) se guarda como 90 1F.
        En red (network order, big endian) debe ser 1F 90.
        Por eso usamos:
            htons()  // host to network short

        Para convertir autom√°ticamente al formato correcto antes de pasar el valor al sistema.

    4Ô∏è‚É£ ¬øY el bind()?

        Una vez has rellenado addr, haces:
            bind(sockfd, (struct sockaddr*)&addr, sizeof(addr))

        Esto le dice al sistema operativo:
            ‚ÄúAsocia mi socket (identificado por sockfd) con esta direcci√≥n IP y este puerto.‚Äù

        Sin esto, el socket no est√° ‚Äúanclado‚Äù a ninguna direcci√≥n, y el sistema no sabr√≠a qu√© conexiones deben llegarle.

*/

int Server::setNonBlocking(int fd)
{
    int flags = fcntl(fd, F_GETFL, 0);
    if (flags == -1)
        return -1;
    return fcntl(fd, F_SETFL, flags | O_NONBLOCK);
}

/*
Por defecto, un socket en Linux es bloqueante.
üö´ Qu√© significa ‚Äúbloqueante‚Äù
    Un socket bloqueante detiene la ejecuci√≥n del programa hasta que la operaci√≥n termina.

    Por ejemplo:
        int client_fd = accept(server_fd, ...);

    üëâ Si no hay ning√∫n cliente intentando conectarse, esta l√≠nea se queda esperando indefinidamente.

    Lo mismo ocurre con:
        recv() ‚Üí espera hasta que haya datos.

        send() ‚Üí espera si el buffer est√° lleno.

    Esto est√° bien si tu programa solo maneja una conexi√≥n a la vez.
    Pero si est√°s escribiendo un servidor multiprop√≥sito, como tu webserv, eso ser√≠a un desastre: mientras una conexi√≥n est√° ‚Äúesperando‚Äù, las dem√°s se quedan congeladas.

‚öôÔ∏è Qu√© hace ‚Äúmodo no bloqueante‚Äù

    Cuando el socket est√° en modo no bloqueante, esas funciones (accept, recv, send, etc.) no bloquean el flujo del programa.

        Si no hay nada que aceptar, accept() devuelve -1 e errno se pone en EAGAIN o EWOULDBLOCK.

        Si no hay datos disponibles en recv(), pasa lo mismo.

        T√∫ puedes seguir ejecutando el resto de tu c√≥digo (por ejemplo, atender otros sockets).

    Esto es esencial para usar poll, select, o epoll ‚Äî mecanismos que te dicen cu√°ndo un socket est√° listo para leer o escribir, sin quedarte bloqueado.




Esta funcion hace que el socket no bloquee.

fcntl(fd, F_GETFL, 0) obtiene las flags actuales del descriptor fd.

fcntl(fd, F_SETFL, flags | O_NONBLOCK) activa la flag O_NONBLOCK.
    No borra los anteriores.
    Solo indica que el socket ya no bloquear√° el flujo.

As√≠, si haces accept() y no hay clientes esperando, la llamada no se queda congelada, sino que devuelve inmediatamente con un error controlable (EAGAIN o EWOULDBLOCK).

Esto ser√° esencial m√°s adelante cuando usemos poll().
*/

/*
Qu√© tienes hasta ahora

    Has creado un objeto Server capaz de:

    Crear un socket TCP.

    Asociarlo a un puerto.

    Escuchar conexiones sin bloquear.

    Cerrar todo ordenadamente al destruir el objeto.

‚û°Ô∏è Todav√≠a no acepta clientes ni responde datos, pero ya es un servidor inicializado que escucha.
Lo siguiente ser√° crear un main.cpp que lo use y a√±adir el bucle principal (aceptar conexiones y enviar un ‚ÄúHello world‚Äù).*/

int Server::getServerFd() const
{
    return _serverFd;
}

void Server::run()
{
    while (true)
    {
        sockaddr_in clientAddr;
        socklen_t clientLen = sizeof(clientAddr);

        int clientFd = accept(_serverFd, (struct sockaddr *)&clientAddr, &clientLen);
        if (clientFd < 0)
        {
            // No hay conexi√≥n nueva (puede pasar si el socket es non-blocking)
            continue;
        }

        std::cout << "Nueva conexi√≥n aceptada!" << std::endl;

        // Mensaje HTTP de respuesta
        const char *response =
            "HTTP/1.1 200 OK\r\n"
            "Content-Type: text/plain\r\n"
            "Content-Length: 12\r\n"
            "\r\n"
            "Hello world!";

        // Enviamos la respuesta al cliente
        send(clientFd, response, strlen(response), 0);

        // Cerrar la conexi√≥n con el cliente -> Osea cerramos el socket del cliente (ya terminamos con √©l)
        close(clientFd);
    }
}

/*
1Ô∏è‚É£ while(true)
    Este es el bucle principal del servidor, el loop infinito del servidor.

    Queremos que siga escuchando y respondiendo sin parar.

    El servidor siempre debe estar escuchando nuevas conexiones.
    En esta versi√≥n b√°sica no tenemos ‚Äúpoll()‚Äù ni ‚Äúthreads‚Äù, as√≠ que el servidor trabaja con una conexi√≥n a la vez.

    En una versi√≥n m√°s avanzada, usaremos poll() o select() para manejar muchos clientes a la vez,
    pero de momento este bucle es suficiente para entender el flujo b√°sico.

    clientAddr es donde accept() va a guardar los datos del cliente que se conecta (su IP y puerto).

    clientLen le dice a accept() cu√°nto espacio tiene para escribir esos datos.
    Por eso lo inicializas con sizeof(clientAddr) ‚Äî no porque clientAddr tenga datos, sino para que accept() sepa cu√°nto puede llenar (el tama√±o de la estructura).


    sockaddr_in es una estructura de C definida en los headers del sistema, concretamente en:
        #include <netinet/in.h>

    Su prop√≥sito es representar una direcci√≥n IPv4 (IP + puerto)
    para cuando queremos conectar, escuchar o aceptar conexiones.
        C++ importa esos nombres como tipos propios.
        As√≠ que ya no hace falta escribir struct cada vez.

        Por eso puedes escribir simplemente:

        sockaddr_in clientAddr;


        y es exactamente equivalente a:

        struct sockaddr_in clientAddr;



2Ô∏è‚É£ accept()
    int clientFd = accept(_serverFd, (struct sockaddr*)&clientAddr, &clientLen);

    accept() bloquea (espera) hasta que un cliente intenta conectarse a nuestro puerto (por ejemplo, con curl http://localhost:8080).

    Cuando eso ocurre:

        accept() devuelve un nuevo descriptor (clientFd), distinto de _serverFd --> Crea un nuevo socket (el clientFd) exclusivo para hablar con ese cliente.
            Devuelve la direcci√≥n IP y el puerto del cliente en clientAddr.
            As√≠ el socket _serverFd sigue escuchando nuevas conexiones,
            y el clientFd se usa solo para atender a esa persona concreta, es la ‚Äúl√≠nea privada‚Äù con ese cliente concreto.

    üß† Piensa: _serverFd es la ‚Äúrecepcionista‚Äù, clientFd es la conversaci√≥n privada.

    if (clientFd < 0)
        accept() puede devolver -1 si no hay ninguna conexi√≥n pendiente todav√≠a.
        No pasa nada: simplemente seguimos el bucle y volvemos a intentarlo.

        Esto es gracias a haber puesto el socket en modo no bloqueante (setNonBlocking). Hace que las operaciones como accept(), recv() o send() no se queden esperando (bloqueadas) si no hay nada que hacer.
        En vez de eso, devuelven -1 inmediatamente y ponen errno = EAGAIN o EWOULDBLOCK.
            ‚Ä¶ese if detecta dos posibles casos:
                Un error real (por ejemplo, algo fall√≥ en el sistema).
                Que no hab√≠a ninguna conexi√≥n lista (lo t√≠pico en modo no bloqueante ‚Üí EAGAIN).

        De lo contrario, accept() se quedar√° esperando hasta que alguien se conecte.



3Ô∏è‚É£ response

    Aqu√≠ estamos construyendo una respuesta HTTP completa.

    HTTP/1.1 200 OK
    Content-Type: text/plain
    Content-Length: 12

    Hello world!


    üî∏ Primera l√≠nea:
    El estado de la respuesta ‚Üí ‚Äú200 OK‚Äù significa que todo ha ido bien.

    üî∏ Cabeceras (headers):
    Le dicen al cliente qu√© tipo de contenido enviamos (text/plain)
    y cu√°nto mide (12 bytes en este caso).

    üî∏ L√≠nea vac√≠a (\r\n)
    Obligatoria: separa las cabeceras del contenido.

    üî∏ Cuerpo:
    El texto real que queremos enviar ‚Üí "Hello world!"


    En las respuestas y peticiones HTTP, las l√≠neas no terminan solo con \n,
    sino con \r\n, que significa:

    \r ‚Üí carriage return (retorno de carro, mueve el cursor al inicio de la l√≠nea)

    \n ‚Üí line feed (salta a la l√≠nea siguiente)

    üîπ Viene del est√°ndar original de los protocolos de red (influenciado por Telnet y por m√°quinas antiguas).
    üîπ Es una forma obligatoria en HTTP/1.0 y HTTP/1.1 para marcar los saltos de l√≠nea en los headers.


3Ô∏è‚É£ send()
    send(clientFd, response, strlen(response), 0);

    Env√≠a datos al cliente usando el socket reci√©n aceptado.

    Esto env√≠a la cadena completa del mensaje HTTP.

    Aqu√≠ estamos mandando un mensaje HTTP completo, aunque muy simple:

        HTTP/1.1 200 OK
        Content-Type: text/plain

        Hello world!

    Eso permite que si abres el navegador en http://localhost:8080, o haces curl http://localhost:8080
    veas ‚ÄúHello world!‚Äù directamente en pantalla üéâ


4Ô∏è‚É£ close()
    close(clientFd);

    Cierra el socket del cliente.

    Si no lo cierras, se quedar√≠an conexiones ‚Äúfantasma‚Äù abiertas (lo que provoca TIME_WAIT o fugas de descriptores).

    Esto significa que:
        Si el cliente (por ejemplo, un navegador) quiere pedir otro recurso,
        tendr√° que abrir una nueva conexi√≥n TCP, o sea, un nuevo file descriptor.

    Pero ojo: HTTP tiene dos modos
        1. HTTP/1.0 (el que usamos aqu√≠)

        ‚Üí Cada petici√≥n usa una conexi√≥n nueva.
        ‚Üí Servidor responde ‚Üí se cierra el socket ‚Üí fin.
        ‚Üí El cliente abre otro si necesita m√°s.

        2. HTTP/1.1 (Keep-Alive)

        ‚Üí Permite mantener la conexi√≥n abierta y enviar varias peticiones seguidas.
        ‚Üí Esto se indica con el header:
            Connection: keep-alive

        Entonces el servidor no cierra el socket hasta que:
            el cliente lo pida,
            o haya pasado un tiempo de inactividad.

    En tu caso (mini servidor inicial)
        Cerrar la conexi√≥n despu√©s de enviar la respuesta est√° perfecto ‚úÖ
        M√°s adelante, cuando tengas un bucle con poll() o select(),
        ya ver√°s c√≥mo mantener conexiones abiertas o detectar cu√°ndo cerrarlas.

*/
