#include "Server.hpp"
#include <iostream>     // para imprimir mensajes
#include <cstring>      // para memset, strerror...
#include <unistd.h>     // para close()
#include <fcntl.h>      // para fcntl() ‚Üí modo no bloqueante
#include <arpa/inet.h>  // para sockaddr_in, htons, INADDR_ANY
#include <sys/socket.h> // para socket(), bind(), listen()

// Constructor: guarda el puerto que usaremos
Server::Server(const std::string &port) : _port(port), _listenFd(-1)
{
}

// Destructor: si el socket est√° abierto, lo cerramos
Server::~Server()
{
    if (_listenFd != -1)
        close(_listenFd);
}

/*
Un socket es un descriptor de archivo especial (como un int) que representa una conexi√≥n de red.

En el constructor, solo guardamos el puerto (a√∫n no creamos el socket).
_listenFd se inicializa con -1 para indicar ‚Äúno hay socket abierto todav√≠a‚Äù.

En el destructor, comprobamos si el socket se cre√≥ (_listenFd != -1), y lo cerramos para liberar recursos del sistema.
    Los recursos (como sockets) deben liberarse autom√°ticamente cuando el objeto se destruye.
*/

bool Server::init()
{
    // Creamos y asociamos el socket al puerto
    _listenFd = createAndBind(_port.c_str()); //_port.c_str() significa que le est√°s pasando el puerto como cadena de caracteres erminado en \0, es decir, un const char* al estilo C.
    if (_listenFd == -1)
    {
        std::cerr << "‚ùå Error: no se pudo crear el socket." << std::endl;
        return false;
    }

    // Lo ponemos en modo no bloqueante
    if (setNonBlocking(_listenFd) == -1)
    {
        std::cerr << "‚ùå Error: no se pudo poner el socket en modo no bloqueante." << std::endl;
        return false;
    }

    // Empezamos a escuchar
    if (listen(_listenFd, 10) == -1)
    {
        std::cerr << "‚ùå Error en listen()." << std::endl;
        return false;
    }

    std::cout << "‚úÖ Servidor escuchando en el puerto " << _port << std::endl;
    return true;
}

/*
Esta es la funci√≥n principal de inicializaci√≥n del servidor.

Llama a createAndBind() ‚Üí que crea el socket y lo asocia a una direcci√≥n IP y puerto.

Llama a setNonBlocking() ‚Üí para que las llamadas accept(), recv(), send() no bloqueen.

Luego hace listen() ‚Üí el servidor empieza a ‚Äúescuchar‚Äù nuevas conexiones entrantes.

Si cualquiera de estas partes falla, devuelve false.

üß† Concepto importante:
En red, ‚Äúbloquear‚Äù significa que el programa se detiene esperando algo (por ejemplo, un cliente que nunca responde).
Si todo fuera bloqueante, solo podr√≠as atender a un cliente a la vez ‚Äî por eso usamos modo no bloqueante.
*/

int Server::createAndBind(const char *port)
{
    int sockfd = socket(AF_INET, SOCK_STREAM, 0);
    if (sockfd == -1)
    {
        std::cerr << "Error creando socket: " << strerror(errno) << std::endl;
        return -1;
    }

    // Reusar la direcci√≥n inmediatamente si el servidor se reinicia
    int opt = 1;
    setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &opt, sizeof(opt));

    struct sockaddr_in addr;
    std::memset(&addr, 0, sizeof(addr));
    addr.sin_family = AF_INET;              // IPv4
    addr.sin_addr.s_addr = INADDR_ANY;      // Escucha en todas las interfaces
    addr.sin_port = htons(std::atoi(port)); // Puerto ‚Üí formato de red

    if (bind(sockfd, (struct sockaddr *)&addr, sizeof(addr)) == -1)
    {
        std::cerr << "Error en bind(): " << strerror(errno) << std::endl;
        close(sockfd);
        return -1;
    }

    return sockfd;
}

/*
En nuestro servidor, necesitamos un socket que:

    Escuche conexiones en un puerto concreto (por ejemplo, 8080).

    Est√© asociado a una direcci√≥n IP (normalmente 0.0.0.0, o sea ‚Äútodas las interfaces locales‚Äù).

    Pueda aceptar clientes que intenten conectarse a √©l.

    üëâ La funci√≥n createAndBind() se encarga de crear ese socket y vincularlo (bind) al puerto donde escuchar√°.


Por qu√© recibe un const char *port en lugar de std::string
    Esto es simplemente por compatibilidad con funciones de C antiguas.
    socket(), bind(), htons() y atoi() son funciones de la librer√≠a C, no de C++.

    atoi() (convertir cadena a n√∫mero) espera un const char *.

    As√≠ que cuando en el constructor del servidor hacemos _listenFd = createAndBind(_port.c_str());
    ... lo que estamos haciendo es convertir el std::string a const char* para que lo pueda usar atoi().



La funci√≥n crea y configura el socket para escuchar conexiones:

socket(AF_INET, SOCK_STREAM, 0)
‚Üí Crea un socket TCP (orientado a conexi√≥n).
    AF_INET = familia de direcciones IPv4.
    SOCK_STREAM = tipo de socket orientado a conexi√≥n (TCP).
    0: protocolo por defecto (TCP).
Si devuelve -1, algo fall√≥ (no se pudo reservar el socket).

setsockopt(... SO_REUSEADDR ...)
‚Üí Permite reiniciar el servidor sin esperar a que el puerto se libere (evita ‚ÄúAddress already in use‚Äù).
    Esta parte permite reutilizar el puerto inmediatamente si reinicias el servidor.
    Sin esto, si paras y arrancas r√°pido, el SO podr√≠a decir:

    ‚ÄúAddress already in use‚Äù üò©

    Porque el puerto sigue en estado TIME_WAIT unos segundos tras cerrar el socket.

    üí° SO_REUSEADDR le dice al kernel:

    ‚ÄúTranquilo, s√© lo que hago, d√©jame reutilizar el puerto enseguida‚Äù.

    ***Pero porque deberia reiniciarse el servidor?
        Este punto (el de setsockopt(... SO_REUSEADDR ...)) suele parecer m√°gico o innecesario al principio‚Ä¶ pero en realidad tiene que ver con c√≥mo funciona el sistema operativo, no solo con tu c√≥digo.

        üß© 1Ô∏è‚É£ Qu√© pasa cuando tu servidor arranca

        Cuando haces esto:

        int sockfd = socket(...);
        bind(sockfd, ...);
        listen(sockfd, ...);


        El sistema operativo (Linux, macOS, etc.) reserva el puerto que le has indicado.
        Por ejemplo, si pides el puerto 8080, el sistema dice:

        ‚ÄúVale, el proceso X est√° usando el puerto 8080, nadie m√°s puede usarlo mientras siga abierto.‚Äù

        As√≠ evita conflictos (dos programas intentando escuchar en el mismo puerto).

        üß© 2Ô∏è‚É£ Qu√© pasa cuando cierras el servidor

        Cuando terminas tu programa (o lo paras con Ctrl+C), en teor√≠a ese socket deber√≠a cerrarse y liberar el puerto.
        Pero el sistema operativo no lo libera de inmediato ‚ö†Ô∏è

        ¬øPor qu√©?
        Porque en una conexi√≥n TCP, hay un mecanismo de seguridad para asegurarse de que no se pierdan mensajes pendientes.
        Cuando cierras el socket, las conexiones que ten√≠a abiertas entran en un estado llamado TIME_WAIT.

        üîé En ese estado:

        El puerto sigue ‚Äúreservado‚Äù durante unos segundos (a veces 30‚Äì60).

        Aunque tu proceso ya termin√≥, el kernel mantiene esa reserva temporal.

        El resultado es que si intentas reiniciar el servidor inmediatamente (por ejemplo, compilas y lo vuelves a ejecutar enseguida), te salta este error:

        Error: bind() failed
        Address already in use


        üß© 3Ô∏è‚É£ Qu√© significa ‚Äúreiniciar el servidor‚Äù

        No es que tu c√≥digo se ‚Äúreinicie solo‚Äù.
        Reiniciar significa algo como:

        T√∫ paras el programa (Ctrl+C, o matas el proceso).

        Lo vuelves a ejecutar enseguida (por ejemplo, porque has recompilado para probar algo nuevo).

        Ejemplo pr√°ctico:

        $ ./webserv
        # Servidor escuchando en el puerto 8080...

        # Lo detienes:
        ^C   # (Ctrl+C)

        # Lo vuelves a ejecutar:
        $ ./webserv
        Error: bind() failed: Address already in use


        üí• Este error se da porque el sistema operativo a√∫n tiene el puerto 8080 bloqueado en TIME_WAIT.

        üß© 4Ô∏è‚É£ Qu√© hace setsockopt(SO_REUSEADDR)

        Esa llamada es una configuraci√≥n opcional del socket, y su funci√≥n es decirle al sistema:

        ‚ÄúTranquilo, quiero reutilizar el puerto incluso si est√° en TIME_WAIT.‚Äù

        Es decir:
        ‚úÖ Permite volver a hacer bind() sobre el mismo puerto aunque el SO crea que ‚Äúa√∫n est√° en uso‚Äù por una conexi√≥n previa del mismo programa.

        No afecta a la seguridad ni al funcionamiento normal.
        Solo acelera el ciclo de desarrollo y evita que tengas que esperar medio minuto cada vez que haces un cambio en el c√≥digo.


        Si no estoy en TIME_WAIT, ¬øpara qu√© quiero SO_REUSEADDR? ¬øNo hace nada, o incluso puede fastidiar algo?‚Äù

            üëâ No, no molesta, y s√≠ conviene dejarla siempre.
            En la mayor√≠a de casos no cambia nada cuando el puerto est√° libre, y solo act√∫a cuando lo necesitas (cuando est√° ocupado en TIME_WAIT).

            El sistema operativo simplemente ignora la opci√≥n porque no tiene nada que ‚Äúreutilizar‚Äù.
            El bind() funciona igual que siempre, sin efectos secundarios.

            ‚úÖ As√≠ que no pasa absolutamente nada diferente respecto a no haber puesto la l√≠nea.

Se llena la estructura sockaddr_in con:

    sin_family: AF_INET ‚Üí familia IPv4

    sin_addr.s_addr: INADDR_ANY ‚Üí escucha en cualquier IP local, es decir, escuchar√° en 127.0.0.1, 192.168.x.x, etc.

    sin_port: htons() ‚Üí convierte el n√∫mero de puerto al formato de red (big endian).


bind() ‚Üí asocia el socket al puerto del sistema operativo.

üí° Si bind() falla, puede ser porque ya hay otro programa usando ese puerto.
*/